/*

Dos lenguajes MQL
Mongo Query Language - campo: { operador: valor }
Aggregation Framework  - operador: { campo: valor }
.pretty() - Para darle un formato bonito

Mayor que - $gt
Mayor o igual que - $gte
Menor que - $lt
Menor o igual que $lte
Igual - $eq
In de SQL - $in
No igual - $neq
Multiplica - $mul
Incrementar - $inc
Actualiza todos si el valor es mayor que todos los registrados - $max
Actualiza todos si el valor es menor que todos los registrados - $min
Agrega elemento al array - $push
Remueve el primer o último elemento del array - $pop
Remueve  elementos del array de acuerdo con la condición - $pull
Arreglos de objetos - $elemMatch
*/


// Use selecciona o crea una base de datos
use cars;

// Creamos una colección
db.createCollection("vintage")

// Insertamos datos
db.vintage.insertOne({
    brand: "Ford",
    model: "Mustang",
    year: 1962,
})

// Insert Many
db.vintage.insertMany([
    {
        brand: "Porsche",
        model: "911",
        year: 1974,
        color: "Amarillo"
    },
    {
        brand: "Lamborghini",
        model: "Miura",
        year: 1965,
        color: "Vino"
    },
    {
        brand: "Chevrolet",
        model: "Corvette",
        year: 1953,
        color: "Vino",
        engine: "V4",
    },
    {
        brand: "Ford",
        model: "Mustang",
        year: 1962,
    },
    {
        brand: "Jaguar",
        model: "E-Type",
        year: 1970,
        color: "Azul",
        engine: "V4",
    },
    {
        brand: "Volkwagen",
        model: "Vocho",
        year: 1967,
        color: "Blanco",
        engine: "V3",
    },
    {
        brand: "Chevrolet",
        model: "Camaro",
        year: 1966,
        color: "Amarillo",
        engine: "V4",
    },
])
// Select
db.vintage.find()

// Búsqueda específica
db.vintage.find({
    brand: "Chevrolet",
})

db.vintage.find({
    brand : {$eq: "Ford"},
    year: {$lte: 1970}
})

db.vintage.find({
    brand : "Ford",
    year: {$lte: 1970}
})
// Uso de OR
db.vintage.find({
    $or: [
        { brand: "Chevrolet" },
        { year: { $lte: 1960 }},
        { color: "Vino" },
    ]
})
// Borrar datos por ID
db.vintage.deleteOne({
    _id: ObjectId("65cbcae707d5c1646c8a0b35")
})
db.vintage.find()

// Actualizar datos
db.vintage.updateOne({brand: "Ford"}, {$set: {color: "Azul"}})
db.vintage.updateMany({brand: "Lamborghini"}, {$set: {color: "Vino"}})
db.vintage.find()

// Eliminar columnas
db.vintage.updateMany({}, {$unset: { engine: "" }})
db.vintage.updateMany({}, {$set: { year: "1970" }})
db.vintage.find()

// Borrar todos los datos
db.vintage.deleteMany({})
db.vintage.find()


// Insertar la fecha actual a todos los registros $currentDate
db.vintage.updateMany({}, {$currentDate: { fecha: true }})
db.vintage.find()

// Timestamp - Cantidad de de segundos desde el 1 de enero de 1970
db.vintage.updateMany({}, { $currentDate: { fecha: { $type: "timestamp"} } })
db.vintage.find()

// Ordenar de Ascendente
db.vintage.find({}, { sort: { year: 1 } })
db.vintage.find({}).sort({ year: 1 })

// Ordenar de Descendente
db.vintage.find({}, { sort: { year: -1 } })
db.vintage.find({}).sort({ year: -1 })

// Ver cantidad de registros
db.vintage.find().count()

// Ver cantidad de registros específjicos
db.vintage.find({ year: { $lt: 1970 }}).count()

// Insertar más de un atributo por columna
db.vintage.insertOne({
	brand: "Fiat",
	model: "SL7",
	year: 1978,
	motor: {
		cylinders: 4,
		hp: 80
	}
})

// Insertar un arreglo
db.vintage.insertOne({
	brand: "Nissan",
	model: "Tsuru",
	version: ["MT", "XR", "GT"]
})

// Notación Punto para buscar atributos dentro de un arreglo
db.vintage.find({
    "motor.hp": 80
})

// Notación punto para buscar por posiciones de arreglo
db.vintage.find({
    "version.0": "MT"
    // "[atributo].[posición en arreglo]": [dato a buscar]
})

// Agregar elemento nuevo a atributo de arreglo
db.vintage.updateOne(
    {_id: ObjectId("65ce4a1318a6854eae61f193")},
    {$push: {version: "ZT"}}
)

// Borrar el primer elemento del arreglo
db.vintage.updateOne(
    {_id: ObjectId("65ce4a1318a6854eae61f193")},
    {$pop: {version: -1}}
)

// Borrar el ultimo elemento del arreglo
db.vintage.updateOne(
    {_id: ObjectId("65ce4a1318a6854eae61f193")},
    {$pop: {version: 1}}
)

// Borrar elementos de acuerdo a una condición
db.vintage.updateOne(
    {_id: ObjectId("65ce4a1318a6854eae61f193")},
    {$pull: {version: {$ne: "GT"} } }
)


use sample_training
show collections
db.companies.find()

// Para buscar en arreglos de objetos
db.companies.find({ offices: {$elemMatch: { city: "Seattle"} } })